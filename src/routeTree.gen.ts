/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const AboutLazyRouteImport = createFileRoute('/about')()
const IndexLazyRouteImport = createFileRoute('/')()
const BlogNo5LazyRouteImport = createFileRoute('/blog/no5')()
const BlogNo4LazyRouteImport = createFileRoute('/blog/no4')()
const BlogNo3LazyRouteImport = createFileRoute('/blog/no3')()
const BlogNo2LazyRouteImport = createFileRoute('/blog/no2')()
const BlogNo1LazyRouteImport = createFileRoute('/blog/no1')()

const AboutLazyRoute = AboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const BlogNo5LazyRoute = BlogNo5LazyRouteImport.update({
  id: '/blog/no5',
  path: '/blog/no5',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/blog/no5.lazy').then((d) => d.Route))
const BlogNo4LazyRoute = BlogNo4LazyRouteImport.update({
  id: '/blog/no4',
  path: '/blog/no4',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/blog/no4.lazy').then((d) => d.Route))
const BlogNo3LazyRoute = BlogNo3LazyRouteImport.update({
  id: '/blog/no3',
  path: '/blog/no3',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/blog/no3.lazy').then((d) => d.Route))
const BlogNo2LazyRoute = BlogNo2LazyRouteImport.update({
  id: '/blog/no2',
  path: '/blog/no2',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/blog/no2.lazy').then((d) => d.Route))
const BlogNo1LazyRoute = BlogNo1LazyRouteImport.update({
  id: '/blog/no1',
  path: '/blog/no1',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/blog/no1.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/blog/no1': typeof BlogNo1LazyRoute
  '/blog/no2': typeof BlogNo2LazyRoute
  '/blog/no3': typeof BlogNo3LazyRoute
  '/blog/no4': typeof BlogNo4LazyRoute
  '/blog/no5': typeof BlogNo5LazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/blog/no1': typeof BlogNo1LazyRoute
  '/blog/no2': typeof BlogNo2LazyRoute
  '/blog/no3': typeof BlogNo3LazyRoute
  '/blog/no4': typeof BlogNo4LazyRoute
  '/blog/no5': typeof BlogNo5LazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/blog/no1': typeof BlogNo1LazyRoute
  '/blog/no2': typeof BlogNo2LazyRoute
  '/blog/no3': typeof BlogNo3LazyRoute
  '/blog/no4': typeof BlogNo4LazyRoute
  '/blog/no5': typeof BlogNo5LazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/blog/no1'
    | '/blog/no2'
    | '/blog/no3'
    | '/blog/no4'
    | '/blog/no5'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/blog/no1'
    | '/blog/no2'
    | '/blog/no3'
    | '/blog/no4'
    | '/blog/no5'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/blog/no1'
    | '/blog/no2'
    | '/blog/no3'
    | '/blog/no4'
    | '/blog/no5'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  BlogNo1LazyRoute: typeof BlogNo1LazyRoute
  BlogNo2LazyRoute: typeof BlogNo2LazyRoute
  BlogNo3LazyRoute: typeof BlogNo3LazyRoute
  BlogNo4LazyRoute: typeof BlogNo4LazyRoute
  BlogNo5LazyRoute: typeof BlogNo5LazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/no5': {
      id: '/blog/no5'
      path: '/blog/no5'
      fullPath: '/blog/no5'
      preLoaderRoute: typeof BlogNo5LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/no4': {
      id: '/blog/no4'
      path: '/blog/no4'
      fullPath: '/blog/no4'
      preLoaderRoute: typeof BlogNo4LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/no3': {
      id: '/blog/no3'
      path: '/blog/no3'
      fullPath: '/blog/no3'
      preLoaderRoute: typeof BlogNo3LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/no2': {
      id: '/blog/no2'
      path: '/blog/no2'
      fullPath: '/blog/no2'
      preLoaderRoute: typeof BlogNo2LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/no1': {
      id: '/blog/no1'
      path: '/blog/no1'
      fullPath: '/blog/no1'
      preLoaderRoute: typeof BlogNo1LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  BlogNo1LazyRoute: BlogNo1LazyRoute,
  BlogNo2LazyRoute: BlogNo2LazyRoute,
  BlogNo3LazyRoute: BlogNo3LazyRoute,
  BlogNo4LazyRoute: BlogNo4LazyRoute,
  BlogNo5LazyRoute: BlogNo5LazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
